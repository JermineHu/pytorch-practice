import torch.nn as nnimport torchimport numpy as npclass BaseNet(nn.Model):    def __init__(self,other_arguments):        super(BaseNet, self).__init__()        self.conv1=nn.Conv2d(in_channels=3,out_channels=4,kernel_size=4)        # other network layer    def forward(self,x):        x=self.conv1(x)        return xcriterion=nn.CrossEntropyLoss()#ã€€loss=criterion()optimizer=torch.optim.SGD(BaseNet().parameters(),lr=0.001,momentum=0.9)optimizer.zero_grad()# save model filetorch.save(BaseNet(),"./model.pth")torch.save(BaseNet().state_dict(),"./model_state.pth")# load model from fileload_model=torch.load('model.pth')# model.load_state_dic(torch.load('model_state.pth'))